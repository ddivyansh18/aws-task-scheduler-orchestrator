'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('grommet/utils');

var base = {
    box: {
        responsiveBreakpoint: 'small',
    },
    heading: {
        responsiveBreakpoint: 'small',
    },
    layer: {
        responsiveBreakpoint: 'small',
    },
};

var colorsFromArray = (colors, array, prefix) => array.forEach((color, index) => {
    colors[`${prefix}-${index + 1}`] = color;
});

const brandColor = '#000000';
const accentColors = ['#FF4081', '#4eadeb', '#56cf98', '#765bba'];
const neutralColors = ['#a4c400', '#006766', '#f3741c', '#8F6C53', '#e82121'];
const backgroundColor = '#5e5e5e';
const colors = {
    active: {
        light: '#3a82b1',
        dark: '#52b7f9',
    },
    background: '#444444',
    brand: brandColor,
    focus: accentColors[0],
    control: {
        dark: '#f8f8f8',
        light: '#444444',
    },
};
colorsFromArray(colors, accentColors, 'accent');
colorsFromArray(colors, neutralColors, 'neutral');
var black = utils.deepFreeze(utils.deepMerge(base, {
    global: {
        colors,
        drop: {
            background: '#444444',
        },
        font: {
            family: "'Inconsolata', monospace",
            size: '16px',
        },
        hover: {
            background: {
                light: '#dddddd',
                dark: '#222222',
            },
            color: {
                light: '#333333',
                dark: '#ffffff',
            },
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    icon: {
        colors,
    },
    anchor: {
        color: {
            light: '#0a466e',
            dark: '#4eadeb',
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: '#0a466e',
                dark: '#4eadeb',
            },
        },
    },
    checkBox: {
        check: {
            radius: '0px',
        },
        toggle: {
            radius: '0px',
        },
    },
    layer: {
        background: backgroundColor,
    },
    rangeInput: {
        track: {
            color: {
                dark: '#3a82b1',
                light: '#52b7f9',
            },
        },
    },
}));

const colors$1 = {
    background: '#ffffff',
    brand: '#ffffff',
    active: {
        light: '#57b457',
        dark: '#52b7f9',
    },
    control: {
        dark: '#52b7f9',
        light: '#4a984a',
    },
    focus: '#5ec660',
    'accent-1': '#367bd5',
    'accent-2': '#5ec660',
    'accent-3': '#d4293d',
    'accent-4': '#9C27B0',
    'neutral-1': '#795548',
    'neutral-2': '#CDDC39',
    'neutral-3': '#607D8B',
    'neutral-4': '#9cb6d7',
    'neutral-5': '#FF9800',
};
const baseSpacing = 16;
var light = utils.deepFreeze(utils.deepMerge(base, {
    global: {
        breakpoints: {
            small: {
                size: {
                    none: '0',
                    hair: '1px',
                    xxsmall: '2px',
                    xsmall: `${baseSpacing / 8}px`,
                    small: `${baseSpacing / 4}px`,
                    medium: `${baseSpacing / 2}px`,
                    large: `${baseSpacing}px`,
                    xlarge: `${baseSpacing * 2}px`,
                },
            },
        },
        colors: colors$1,
        font: {
            family: "'Montserrat', sans-serif;",
            size: '14px',
        },
        edgeSize: {
            none: '0',
            hair: '1px',
            xxsmall: `${baseSpacing / 8}px`,
            xsmall: `${baseSpacing / 4}px`,
            small: `${baseSpacing / 2}px`,
            medium: `${baseSpacing}px`,
            large: `${baseSpacing * 2}px`,
            xlarge: `${baseSpacing * 4}px`,
        },
        hover: {
            background: {
                light: '#c8c8c8',
                dark: '#333333',
            },
            color: {
                light: '#333333',
                dark: '#f8f8f8',
            },
        },
        selected: {
            background: '#635d60',
            color: '#f8f8f8',
        },
    },
    text: {
        xsmall: { size: '10px', height: 1.5 },
        small: { size: '12px', height: 1.43 },
        medium: { size: '14px', height: 1.375 },
        large: { size: '20px', height: 1.167 },
        xlarge: { size: '28px', height: 1.1875 },
        xxlarge: { size: '26px', height: 1.125 },
    },
    heading: {
        font: false,
        weight: 500,
    },
    icon: {
        size: {
            xsmall: '14px',
        },
    },
    button: {
        border: {
            radius: '1px',
            color: {
                dark: '#fbf9ff',
                light: '#28599e',
            },
        },
        // color: { dark: undefined, light: undefined }
        primary: {
            color: {
                dark: '#0093ff',
                light: '#316cbe',
            },
        },
    },
    anchor: {
        textDecoration: 'none',
        fontWeight: 600,
        color: {
            dark: '#f7efff',
            light: '#275596',
        },
    },
    checkBox: {
        border: {
            width: '2px',
        },
        check: {
            radius: '4px',
            thickness: '4px',
        },
    },
    rangeInput: {
        track: {
            color: {
                dark: '#3a82b1',
                light: '#52b7f9',
            },
        },
    },
}));

var colorsFromObject = (colors, obj, prefix) => Object.keys(obj).forEach(color => {
    colors[`${prefix}-${color}`] = obj[color];
});

const brandColor$1 = '#00ABD4';
const accentColors$1 = ['#2AD2C9', '#FFC107', '#9C27B0', '#673AB7'];
const neutralColors$1 = ['#795548', '#009688', '#8BC34A', '#CDDC39', '#FF9800'];
const statusColors = {
    critical: '#FF4081',
    error: '#F44336',
    warning: '#FFEB3B',
    ok: '#4CAF50',
    unknown: '#9E9E9E',
    disabled: '#9E9E9E',
};
const focusColor = accentColors$1[0];
const colors$2 = {
    active: {
        light: '#f50057',
        dark: '#ff4081',
    },
    background: '#ffffff',
    brand: brandColor$1,
    focus: focusColor,
    control: {
        dark: '#ffffff',
        light: '#00ABD4',
    },
};
colorsFromArray(colors$2, accentColors$1, 'accent');
colorsFromArray(colors$2, neutralColors$1, 'neutral');
colorsFromObject(colors$2, statusColors, 'status');
var materiallight = utils.deepFreeze(utils.deepMerge(base, {
    global: {
        colors: colors$2,
        drop: {
            background: '#f8f8f8',
            border: {
                width: '0px',
                radius: '0px',
            },
        },
        hover: {
            background: {
                light: '#d5f3ff',
                dark: '#5a5a5a',
            },
            text: {
                light: '#000000',
                dark: '#f8f8f8',
            },
        },
        focus: {
            border: {
                color: '#f50057',
            },
        },
        font: {
            family: '"Roboto", "Helvetica", "Arial", sans-serif',
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: '#3f51b5',
                dark: '#7986cb',
            },
        },
    },
    checkBox: {
        check: {
            radius: '0px',
        },
        color: {
            light: brandColor$1,
            dark: '#a7ecff',
        },
        toggle: {
            color: {
                dark: '#bdbdbd',
                light: brandColor$1,
            },
        },
    },
    radioButton: {
        border: {
            color: {
                light: 'rgba(0, 98, 186, 0.5)',
                dark: 'rgba(255, 255, 255, 0.5)',
            },
        },
    },
    anchor: {
        color: {
            light: '#3f51b5',
            dark: '#7986cb',
        },
    },
}));

const brandColor$2 = '#000000';
const backgroundColor$1 = '#444444';
const accentColors$2 = ['#2AD2C9', '#FFC107', '#9C27B0', '#673AB7'];
const neutralColors$2 = ['#795548', '#009688', '#8BC34A', '#CDDC39', '#FF9800'];
const statusColors$1 = {
    critical: '#FF4081',
    error: '#F44336',
    warning: '#FFEB3B',
    ok: '#4CAF50',
    unknown: '#9E9E9E',
    disabled: '#9E9E9E',
};
const focusColor$1 = accentColors$2[0];
const colors$3 = {
    active: {
        light: '#f50057',
        dark: '#ff4081',
    },
    brand: brandColor$2,
    background: backgroundColor$1,
    focus: focusColor$1,
    control: {
        dark: '#f8f8f8',
        light: '#444444',
    },
};
colorsFromArray(colors$3, accentColors$2, 'accent');
colorsFromArray(colors$3, neutralColors$2, 'neutral');
colorsFromObject(colors$3, statusColors$1, 'status');
var materialdark = utils.deepFreeze(utils.deepMerge(base, {
    global: {
        colors: colors$3,
        drop: {
            background: '#2a2a2a',
        },
        hover: {
            background: {
                light: '#dddddd',
                dark: '#222222',
            },
            text: {
                light: '#000000',
                dark: '#f8f8f8',
            },
        },
        focus: {
            border: {
                color: '#f50057',
            },
        },
        font: {
            family: '"Roboto", "Helvetica", "Arial", sans-serif',
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: '#f50057',
                dark: '#ff4081',
            },
        },
    },
    checkBox: {
        check: {
            radius: '0px',
        },
    },
    layer: {
        background: backgroundColor$1,
    },
    anchor: {
        color: {
            light: '#f50057',
            dark: '#ff4081',
        },
    },
}));

const brandColor$3 = '#0072c6';
const accentColors$3 = ['#fa6800', '#128023', '#0050ef', '#d80073'];
const neutralColors$3 = ['#a4c400', '#00aba9', '#BF5A15', '#8F6C53', '#9A1616'];
const colors$4 = {
    background: '#ffffff',
    brand: brandColor$3,
    control: {
        dark: '#f8f8f8',
        light: '#444444',
    },
};
colorsFromArray(colors$4, accentColors$3, 'accent');
colorsFromArray(colors$4, neutralColors$3, 'neutral');
var metro = utils.deepFreeze(utils.deepMerge(base, {
    global: {
        colors: colors$4,
        drop: {
            background: '#005696',
            border: {
                width: '0px',
                radius: '0px',
            },
        },
        hover: {
            background: {
                light: '#a5cdff',
                dark: '#405063',
            },
            color: {
                light: '#333333',
                dark: '#cccccc',
            },
        },
        focus: {
            border: {
                color: {
                    light: brandColor$3,
                    dark: '#003967',
                },
            },
        },
        font: {
            family: '-apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Roboto", "Ubuntu", "Helvetica Neue", sans-serif',
        },
        control: {
            border: {
                radius: '0px',
            },
        },
    },
    button: {
        border: {
            radius: '0px',
        },
        primary: {
            color: {
                light: brandColor$3,
                dark: 'accent-1',
            },
        },
    },
    anchor: {
        color: {
            light: '#0078D4',
            dark: '#ffffff',
        },
    },
    checkBox: {
        border: {
            color: {
                light: 'rgba(0, 98, 186, 0.5)',
                dark: 'rgba(255, 255, 255, 0.5)',
            },
        },
        check: {
            radius: '0px',
        },
        color: {
            light: brandColor$3,
            dark: '#a6cfff',
        },
        toggle: {
            color: {
                dark: '#bdbdbd',
                light: brandColor$3,
            },
            radius: '0px',
        },
    },
    layer: {
        backgroundColor: '#eef3fc',
        border: {
            radius: '0px',
        },
    },
    radioButton: {
        border: {
            color: {
                light: 'rgba(0, 98, 186, 0.5)',
                dark: 'rgba(255, 255, 255, 0.5)',
            },
        },
    },
}));

exports.base = base;
exports.black = black;
exports.colorsFromArray = colorsFromArray;
exports.colorsFromObject = colorsFromObject;
exports.light = light;
exports.materialdark = materialdark;
exports.materiallight = materiallight;
exports.metro = metro;
