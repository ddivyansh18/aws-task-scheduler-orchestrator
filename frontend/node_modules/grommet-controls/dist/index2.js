'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var grommet = require('grommet');
var object = require('grommet/utils/object');
var colors$1 = require('grommet/utils/colors');
var colors = require('./colors.js');
var reactChartjs2 = require('react-chartjs-2');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const normalizedColor = (color, theme) => colors.colorForName(colors$1.normalizeColor(color, theme), theme);
const withChartTheme = (WrappedComponent, _a = {}) => {
    var { classOpacity = 0.6, defaultScales = [{}] } = _a, other = tslib.__rest(_a, ["classOpacity", "defaultScales"]);
    return ({ options, data }) => (React__default['default'].createElement(grommet.ThemeContext.Consumer, null, theme => {
        const textColor = normalizedColor('text', theme);
        const axisColors = {
            ticks: {
                fontColor: textColor,
            },
            gridLines: {
                color: normalizedColor('border', theme),
            },
            scaleLabel: {
                fontColor: textColor,
            },
        };
        const defaultOptions = {
            maintainAspectRatio: false,
            title: {
                fontColor: textColor,
            },
            legend: {
                labels: {
                    fontColor: textColor,
                },
            },
            scales: {},
        };
        const themedOptions = object.deepMerge(defaultOptions, options);
        themedOptions.scales.xAxes = themedOptions.scales.xAxes || defaultScales;
        themedOptions.scales.yAxes = themedOptions.scales.yAxes || defaultScales;
        themedOptions.scales.xAxes = themedOptions.scales.xAxes.map(x => object.deepMerge(axisColors, x));
        themedOptions.scales.yAxes = themedOptions.scales.yAxes.map(y => object.deepMerge(axisColors, y));
        let datasets;
        if (data && Array.isArray(data.datasets)) {
            datasets = data.datasets.map((dataset, i) => {
                const { backgroundColor, borderColor, color } = dataset, rest = tslib.__rest(dataset, ["backgroundColor", "borderColor", "color"]);
                let newOpts;
                const themeColors = (index, itemOpacity) => {
                    const lineColor = borderColor || color || colors.colorFromIndex(index);
                    const lineColors = Array.isArray(lineColor)
                        ? lineColor.map(c => normalizedColor(c, theme))
                        : normalizedColor(lineColor, theme);
                    const fillColor = backgroundColor || lineColor;
                    const opacity = itemOpacity ||
                        dataset.opacity ||
                        (options && options.opacity) ||
                        classOpacity;
                    const fillColors = Array.isArray(fillColor)
                        ? fillColor.map(c => colors$1.getRGBA(normalizedColor(c, theme), opacity))
                        : colors$1.getRGBA(normalizedColor(fillColor, theme), opacity);
                    return {
                        backgroundColor: fillColors,
                        borderColor: lineColors,
                    };
                };
                if (options && options.themedData && dataset.data) {
                    newOpts = { backgroundColor: [], borderColor: [] };
                    dataset.data.forEach((dataRow, rIndex) => {
                        const colors = themeColors(rIndex, dataRow.opacity);
                        newOpts.backgroundColor.push(colors.backgroundColor);
                        newOpts.borderColor.push(colors.borderColor);
                    });
                }
                else {
                    newOpts = themeColors(i);
                }
                return Object.assign(Object.assign(Object.assign({}, newOpts), other), rest);
            });
        }
        return (React__default['default'].createElement(WrappedComponent, { options: themedOptions, data: Object.assign(Object.assign({}, data), { datasets }) }));
    }));
};

/**
 * Bar chart wrapper to chart.js Bar with grommet theming<br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { BarChart } from 'grommet-controls/chartjs';`<br/>
 * `<BarChart data={...} options={...} />`<br/>
 */
const BarChart = withChartTheme(reactChartjs2.Bar, { borderWidth: 3 });

/** Doughnut chart wrapper to chart.js Doughnut with grommet theming,br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { DoughnutChart } from 'grommet-controls/chartjs';`<br/>
 * `<DoughnutChart data={...} options={...} />`<br/>
 */
const DoughnutChart = withChartTheme(reactChartjs2.Doughnut, {
    classOpacity: 1,
    defaultScales: [],
});

/** HorizontalBar chart wrapper to chart.js HorizontalBar with grommet theming<br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { HorizontalBarChart } from 'grommet-controls/chartjs';`<br/>
 * `<HorizontalBarChart data={...} options={...} />`<br/>
 */
const HorizontalBarChart = withChartTheme(reactChartjs2.HorizontalBar, { borderWidth: 3 });

/** Line chart wrapper to chart.js Line with grommet theming<br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { LineChart } from 'grommet-controls/chartjs';`<br/>
 * `<LineChart data={...} options={...} />`<br/>
 */
const LineChart = withChartTheme(reactChartjs2.Line);

/** Pie chart wrapper to chart.js Pie with grommet theming<br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { PieChart } from 'grommet-controls/chartjs';`<br/>
 * `<PieChart data={...} options={...} />`<br/>
 */
const PieChart = withChartTheme(reactChartjs2.Pie, { classOpacity: 1, defaultScales: [] });

/** Polar chart wrapper to chart.js Polar with grommet theming<br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { PolarChart } from 'grommet-controls/chartjs';`<br/>
 * `<PolarChart data={...} options={...} />`<br/>
 */
const PolarChart = withChartTheme(reactChartjs2.Polar, { defaultScales: [] });

/** Radar chart wrapper to chart.js Radar with grommet theming<br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { RadarChart } from 'grommet-controls/chartjs';`<br/>
 * `<RadarChart data={...} options={...} />`<br/>
 */
const RadarChart = withChartTheme(reactChartjs2.Radar, { defaultScales: [] });

/** Scatter chart wrapper to chart.js Scatter with grommet theming<br/>
 * For all standard charting options, consult the chart.js docs<br/>
 * `import { ScatterChart } from 'grommet-controls/chartjs';`<br/>
 * `<ScatterChart data={...} options={...} />`<br/>
 */
const ScatterChart = withChartTheme(reactChartjs2.Scatter);

exports.BarChart = BarChart;
exports.DoughnutChart = DoughnutChart;
exports.HorizontalBarChart = HorizontalBarChart;
exports.LineChart = LineChart;
exports.PieChart = PieChart;
exports.PolarChart = PolarChart;
exports.RadarChart = RadarChart;
exports.ScatterChart = ScatterChart;
exports.withChartTheme = withChartTheme;
