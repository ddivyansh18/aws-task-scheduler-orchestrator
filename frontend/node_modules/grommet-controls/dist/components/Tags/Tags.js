var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import { Box, Keyboard, Text, } from 'grommet';
import { FormClose } from 'grommet-icons/icons/FormClose';
import { Tag } from '../Tag';
export const TagsSelect = (props) => {
    const _a = props || { tagProps: {} }, { tagProps } = _a, rest = __rest(_a, ["tagProps"]);
    return ({ placeholder, value, onChange }) => (React.createElement(Tags, Object.assign({ focusable: false, placeholder: placeholder, value: value, onChange: onChange, tagProps: Object.assign(Object.assign({}, tagProps), { onClick: e => e.stopPropagation() }) }, rest)));
};
/**
 * A list of tags that can be removed<b/>
 * `import { Tags } from 'grommet-controls';`<b/>
 * `<Tags />`<b/>
 */
class Tags extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            selectedTagIndex: -1,
        };
        this.tagRefs = [];
        this.elementRef = React.createRef();
        this.selectTag = (selected) => {
            const { onChange, value } = this.props;
            if (onChange) {
                let tags = selected;
                if (Array.isArray(value)) {
                    const index = value.indexOf(tags);
                    if (index !== -1) {
                        tags = value.filter(item => item !== selected);
                    }
                    else {
                        tags = [...value, tags];
                    }
                }
                else {
                    tags = [tags];
                }
                onChange({ target: findDOMNode(this.elementRef.current), option: selected, value: tags });
            }
        };
        this.onNextTag = (event) => {
            const { value } = this.props;
            const { selectedTagIndex } = this.state;
            event.preventDefault();
            let index = selectedTagIndex + 1;
            if (index >= value.length) {
                index = 0;
            }
            this.focusTag(index);
        };
        this.onPreviousTag = (event) => {
            const { selectedTagIndex } = this.state;
            const { value } = this.props;
            event.preventDefault();
            let index = selectedTagIndex - 1;
            if (index < 0) {
                index = value.length - 1;
            }
            this.focusTag(index);
        };
        this.onSelectTag = (event) => {
            const { value } = this.props;
            const { selectedTagIndex } = this.state;
            if (selectedTagIndex >= 0 && selectedTagIndex < value.length) {
                event.preventDefault(); // prevent submitting forms
                event.stopPropagation();
                this.selectTag(value[selectedTagIndex]);
            }
        };
        this.onCloseClick = (e, tag) => {
            e.stopPropagation();
            this.selectTag(tag);
        };
    }
    focusTag(index) {
        if (index >= 0 && index < this.tagRefs.length) {
            const tagElement = findDOMNode(this.tagRefs[index].current);
            if (tagElement && typeof tagElement.focus === 'function') {
                tagElement.focus();
            }
            this.setState({ selectedTagIndex: index });
        }
    }
    render() {
        const _a = this.props, { placeholder, children, value, onChange, focusable, onClick, direction, icon, tagProps } = _a, rest = __rest(_a, ["placeholder", "children", "value", "onChange", "focusable", "onClick", "direction", "icon", "tagProps"]);
        let noValues;
        if ((!value || (Array.isArray(value) && value.length === 0))) {
            noValues = React.isValidElement(placeholder) ? placeholder : (
            // placeholder. minimum height of icon to keep size
            React.createElement(Text, { color: 'placeholder', style: { minHeight: '24px' } }, placeholder || 'No selection'));
        }
        let values;
        if (Array.isArray(value)) {
            values = value;
        }
        else {
            values = value ? [value] : [];
        }
        return (React.createElement(Keyboard, { onEnter: this.onSelectTag, onSpace: this.onSelectTag, onLeft: this.onPreviousTag, onRight: this.onNextTag },
            React.createElement(Box, Object.assign({ tabIndex: focusable ? 0 : undefined, ref: this.elementRef, direction: direction, overflow: 'auto', style: { minWidth: 'auto' } }, rest), noValues || values.map((tag, index) => {
                if (children) {
                    return children(tag, index, value);
                }
                if (!this.tagRefs[index]) {
                    this.tagRefs[index] = React.createRef();
                }
                return (React.createElement(Tag, Object.assign({ key: `tag_${tag}_${index}`, ariaChecked: true, a11yTitle: `Remove ${tag.toString()}`, label: typeof tag !== 'object' ? tag.toString() : undefined, ref: this.tagRefs[index], onClick: onClick ? e => onClick(e, tag) : undefined, onChange: onChange ? e => this.onCloseClick(e, tag) : undefined, icon: icon }, (typeof tag === 'object' ? Object.assign(Object.assign({}, tagProps), tag) : tagProps))));
            }))));
    }
}
Tags.defaultProps = {
    pad: 'small',
    focusable: true,
    margin: { horizontal: 'xsmall', vertical: 'small' },
    value: [],
    gap: 'xsmall',
    direction: 'row-responsive',
    icon: React.createElement(FormClose, null),
};
export { Tags };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhZ3MvVGFncy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBYSxNQUFNLE9BQU8sQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFDTixHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksR0FDbkIsTUFBTSxTQUFTLENBQUM7QUFDakIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHN0IsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBaUIsRUFBRSxFQUFFO0lBQzlDLE1BQU0sS0FBd0IsS0FBSyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFqRCxFQUFFLFFBQVEsT0FBdUMsRUFBbEMsSUFBSSxjQUFuQixZQUFxQixDQUE0QixDQUFDO0lBQ3hELE9BQU8sQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQzNDLG9CQUFDLElBQUksa0JBQ0gsU0FBUyxFQUFFLEtBQUssRUFDaEIsV0FBVyxFQUFFLFdBQVcsRUFDeEIsS0FBSyxFQUFFLEtBQUssRUFDWixRQUFRLEVBQUUsUUFBUSxFQUNsQixRQUFRLGtDQUNILFFBQVEsS0FDWCxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFFLE9BRS9CLElBQUksRUFDUixDQUNMLENBQUM7QUFDRixDQUFDLENBQUM7QUFLRjs7OztHQUlHO0FBQ0gsTUFBTSxJQUFLLFNBQVEsU0FBNEM7SUFBL0Q7O1FBV0UsVUFBSyxHQUFlO1lBQ2xCLGdCQUFnQixFQUFFLENBQUMsQ0FB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