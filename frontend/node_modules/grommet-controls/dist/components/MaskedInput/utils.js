import { conformToMask } from 'text-mask-core';
const strCaretTrap = '[]';
const processCaretTraps = (mask) => {
    const indexes = [];
    let indexOfCaretTrap;
    while (indexOfCaretTrap = mask.indexOf(strCaretTrap), indexOfCaretTrap !== -1) { // eslint-disable-line
        indexes.push(indexOfCaretTrap);
        mask.splice(indexOfCaretTrap, 1);
    }
    return mask;
};
export const transformMaskedValue = (value, providedMask, props) => {
    if (!providedMask) {
        return value.toString();
    }
    let { pipe } = props;
    let safeValue;
    if (value === undefined || value === null) {
        safeValue = '';
    }
    else {
        safeValue = value.toString();
    }
    let mask;
    if (typeof providedMask === 'object' &&
        providedMask.pipe !== undefined &&
        providedMask.mask !== undefined) {
        // eslint-disable-next-line no-param-reassign
        providedMask = providedMask.mask;
        ({ pipe } = providedMask);
    }
    if (typeof providedMask === 'function') {
        mask = providedMask(safeValue, Object.assign(Object.assign({}, props), { pipe }));
        // disable masking if `mask` is `false`
        if (mask === false) {
            return safeValue;
        }
        // The processed mask is what we're interested in
        mask = processCaretTraps(mask);
        // If the `providedMask` is not a function, we just use it as-is.
    }
    else {
        mask = providedMask;
    }
    let conformedValue = safeValue;
    const { guide, placeholderChar, placeholder, currentCaretPosition, showMask, keepCharPositions, } = props;
    const conformToMaskConfig = {
        previousPlaceholder: placeholder,
        guide,
        placeholderChar,
        pipe,
        currentCaretPosition,
        keepCharPositions,
    };
    const conformed = conformToMask(safeValue, mask, conformToMaskConfig);
    if (conformed) {
        ({ conformedValue } = conformed);
    }
    if (typeof pipe === 'function') {
        const pipeResults = pipe(conformedValue, Object.assign({ rawValue: safeValue }, conformToMaskConfig));
        if (typeof pipeResults === 'string') {
            conformedValue = pipeResults;
        }
    }
    if (conformedValue === placeholder) {
        conformedValue = showMask ? placeholder : '';
    }
    return conformedValue;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NYXNrZWRJbnB1dC91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHL0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBRTFCLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFjLEVBQVksRUFBRTtJQUNyRCxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFFbkIsSUFBSSxnQkFBZ0IsQ0FBQztJQUNyQixPQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxzQkFBc0I7UUFDcEcsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDbEM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQ2xDLEtBQXNCLEVBQ3RCLFlBQXNCLEVBQ3RCLEtBQWlCLEVBQ1QsRUFBRTtJQUNWLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDakIsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDekI7SUFDRCxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLElBQUksU0FBUyxDQUFDO0lBQ2QsSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7UUFDekMsU0FBUyxHQUFHLEVBQUUsQ0FBQztLQUNoQjtTQUFNO1FBQ0wsU0FBUyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUM5QjtJQUNELElBQUksSUFBSSxDQUFDO0lBQ1QsSUFDRSxPQUFPLFlBQVksS0FBSyxRQUFRO1FBQy9CLFlBQWdDLENBQUMsSUFBSSxLQUFLLFNBQVM7UUFDbkQsWUFBZ0MsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUNwRDtRQUNBLDZDQUE2QztRQUM3QyxZQUFZLEdBQUksWUFBZ0MsQ0FBQyxJQUFJLENBQUM7UUFDdEQsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLFlBQStCLENBQUMsQ0FBQztLQUM5QztJQUNELElBQUksT0FBTyxZQUFZLEtBQUssVUFBVSxFQUFFO1FBQ3RDLElBQUksR0FBRyxZQUFZLENBQUMsU0FBUyxrQ0FBTyxLQUFLLEtBQUUsSUFBSSxJQUFHLENBQUM7UUFFbkQsdUNBQXVDO1FBQ3ZDLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtZQUNsQixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELGlEQUFpRDtRQUNqRCxJQUFJLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsaUVBQWlFO0tBQ2xFO1NBQU07UUFDTCxJQUFJLEdBQUcsWUFBWSxDQUFDO0tBQ3JCO0lBQ0QsSUFBSSxjQUFjLEdBQUcsU0FBUyxDQUFDO0lBQy9CLE1BQU0sRUFDSixLQUFLLEVBQ0wsZUFBZSxFQUNmLFdBQVcsRUFDWCxvQkFBb0IsRUFDcEIsUUFBUSxFQUNSLGlCQUFpQixHQUNsQixHQUFHLEtBQUssQ0FBQztJQUVWLE1BQU0sbUJBQW1CLEdBQUc7UUFDMUIsbUJBQW1CLEVBQUUsV0FBVztRQUNoQyxLQUFLO1FBQ0wsZUFBZTtRQUNmLElBQUk7UUFDSixvQkFBb0I7UUFDcEIsaUJBQWlCO0tBQ2xCLENBQUM7SUFDRixNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3RFLElBQUksU0FBUyxFQUFFO1FBQ2IsQ0FBQyxFQUFFLGNBQWMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsSUFBSSxPQUFPLElBQUksS0FBSyxVQUFVLEVBQUU7UUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGNBQWMsa0JBQ3JDLFFBQVEsRUFBRSxTQUFTLElBQ2hCLG1CQUFtQixFQUN0QixDQUFDO1FBQ0gsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7WUFDbkMsY0FBYyxHQUFHLFdBQVcsQ0FBQztTQUM5QjtLQUNGO0lBQ0QsSUFBSSxjQUFjLEtBQUssV0FBVyxFQUFFO1FBQ2xDLGNBQWMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQzlDO0lBQ0QsT0FBTyxjQUFjLENBQUM7QUFDeEIsQ0FBQyxDQUFDIn0=