var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import { createTextMaskInputElement } from 'text-mask-core';
import { createAutoCorrectedDatePipe, emailMask, createNumberMask, } from 'text-mask-addons';
import { DropInput } from '../DropInput';
import { transformMaskedValue } from './utils';
import { createMinMaxInputPipe, maskedNumberValue } from './minMaxNumberPipe';
/** A masked Input control with an optional drop button with the specified dropContent<br/>
 * `import { MakedInput } from 'grommet-controls';`<br/>
 * `<MakedInput mask={...} />`<br/>
 */
class MaskedInput extends Component {
    constructor() {
        super(...arguments);
        this.textMaskInputElement = null;
        this.inputControlRef = React.createRef();
        this.onInput = event => {
            const { onInput } = this.props;
            if (this.textMaskInputElement) {
                this.textMaskInputElement.update(event.target.value);
            }
            if (onInput) {
                onInput(event);
            }
        };
    }
    initTextMask() {
        const { props, props: { value }, } = this;
        if (props.mask && this.inputControlRef) {
            this.textMaskInputElement = createTextMaskInputElement(Object.assign({ 
                // eslint-disable-next-line react/no-find-dom-node
                inputElement: findDOMNode(this.inputControlRef.current).getElementsByTagName('input')[0] }, props));
            this.textMaskInputElement.update(value);
        }
    }
    componentDidMount() {
        this.initTextMask();
    }
    componentDidUpdate() {
        this.initTextMask();
    }
    maskedValue(value) {
        if (value === undefined) {
            return undefined;
        }
        const { mask } = this.props;
        if (value) {
            const conformed = transformMaskedValue(value, mask, this.props);
            return conformed;
        }
        return value;
    }
    render() {
        const _a = this.props, { defaultValue, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        value, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        mask, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        guide, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        showMask, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        pipe, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        placeholderChar, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        keepCharPositions } = _a, rest = __rest(_a, ["defaultValue", "value", "mask", "guide", "showMask", "pipe", "placeholderChar", "keepCharPositions"]);
        return (React.createElement(DropInput, Object.assign({ ref: this.inputControlRef, value: this.maskedValue(value), defaultValue: this.maskedValue(defaultValue), onInput: this.onInput }, rest)));
    }
}
MaskedInput.defaultProps = {
    type: 'text',
    guide: true,
    showMask: false,
    placeholderChar: '\u2000',
};
MaskedInput.alphabetic = /[A-Z]/i;
MaskedInput.placeholderChars = {
    whitespace: '\u2000',
    underscore: '_',
};
MaskedInput.digit = /\d/;
MaskedInput.createAutoCorrectedDatePipe = createAutoCorrectedDatePipe;
MaskedInput.emailMask = emailMask;
MaskedInput.createNumberMask = createNumberMask;
MaskedInput.createMinMaxInputPipe = createMinMaxInputPipe;
MaskedInput.maskedNumberValue = maskedNumberValue;
export { MaskedInput };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFza2VkSW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9NYXNrZWRJbnB1dC9NYXNrZWRJbnB1dC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFDTCwyQkFBMkIsRUFDM0IsU0FBUyxFQUNULGdCQUFnQixHQUNqQixNQUFNLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRzlFOzs7R0FHRztBQUNILE1BQU0sV0FBWSxTQUFRLFNBQTRCO0lBQXREOztRQTJCRSx5QkFBb0IsR0FBRyxJQUFJLENBQUM7UUFFNUIsb0JBQWUsR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFvQixDQUFDO1FBRXRELFlBQU8sR0FBRyxLQUFLLENBQUMsRUFBRTtZQUNoQixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMvQixJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3REO1lBQ0QsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2hCO1FBQ0gsQ0FBQyxDQUFDO0lBb0VKLENBQUM7SUFsRUMsWUFBWTtRQUNWLE1BQU0sRUFDSixLQUFLLEVBQ0wsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQ2pCLEdBQUcsSUFBSSxDQUFDO1FBQ1QsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLDBCQUEwQjtnQkFDcEQsa0RBQWtEO2dCQUNsRCxZQUFZLEVBQUcsV0FBVyxDQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FDUixDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUNwRCxLQUFLLEVBQ1IsQ0FBQztZQUNILElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBSztRQUNmLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLFNBQVMsQ0FBQztTQUNsQjtRQUNELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzVCLElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEUsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxLQWlCRixJQUFJLENBQUMsS0FBSyxFQWpCUixFQUNKLFlBQVk7UUFDWiw2REFBNkQ7UUFDN0QsS0FBSztRQUNMLDZEQUE2RDtRQUM3RCxJQUFJO1FBQ0osNkRBQTZEO1FBQzdELEtBQUs7UUFDTCw2REFBNkQ7UUFDN0QsUUFBUTtRQUNSLDZEQUE2RDtRQUM3RCxJQUFJO1FBQ0osNkRBQTZEO1FBQzdELGVBQWU7UUFDZiw2REFBNkQ7UUFDN0QsaUJBQWlCLE9BRUwsRUFEVCxJQUFJLGNBaEJILHNHQWlCTCxDQUFhLENBQUM7UUFDZixPQUFPLENBQ0wsb0JBQUMsU0FBUyxrQkFDUixHQUFHLEVBQUUsSUFBSSxDQUFDLGVBQXNCLEVBQ2hDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUM5QixZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFDNUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLElBQ2pCLElBQUksRUFDUixDQUNILENBQUM7SUFDSixDQUFDOztBQXpHTSx3QkFBWSxHQUFHO0lBQ3BCLElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsS0FBSztJQUNmLGVBQWUsRUFBRSxRQUFRO0NBQzFCLENBQUM7QUFFSyxzQkFBVSxHQUFHLFFBQVEsQ0FBQztBQUV0Qiw0QkFBZ0IsR0FBRztJQUN4QixVQUFVLEVBQUUsUUFBUTtJQUNwQixVQUFVLEVBQUUsR0FBRztDQUNoQixDQUFDO0FBRUssaUJBQUssR0FBRyxJQUFJLENBQUM7QUFFYix1Q0FBMkIsR0FBRywyQkFBMkIsQ0FBQztBQUUxRCxxQkFBUyxHQUFHLFNBQVMsQ0FBQztBQUV0Qiw0QkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUVwQyxpQ0FBcUIsR0FBRyxxQkFBcUIsQ0FBQztBQUU5Qyw2QkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztBQW9GL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDIn0=