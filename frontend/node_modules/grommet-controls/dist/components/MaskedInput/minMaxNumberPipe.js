var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { transformMaskedValue } from './utils';
export const maskedNumberValue = ({ value, prefix, suffix, thousandsSeparatorSymbol, }) => {
    let val;
    if (typeof value === 'string') {
        val = value.replace(new RegExp(`[${prefix}${suffix}${thousandsSeparatorSymbol}]`, 'g'), '');
        val = parseFloat(val);
        if (Number.isNaN(val)) {
            val = undefined;
        }
    }
    else {
        val = value;
    }
    return val;
};
export const createMinMaxInputPipe = (_a) => {
    var { min, max, mask } = _a, props = __rest(_a, ["min", "max", "mask"]);
    return (conformedValue) => {
        if (typeof min === 'number' || typeof max === 'number') {
            const value = maskedNumberValue(Object.assign(Object.assign({}, props), { value: conformedValue }));
            if (typeof value === 'number') {
                if (typeof min === 'number' && value < min) {
                    const resolved = transformMaskedValue(min, mask, props);
                    if (resolved === undefined) {
                        return undefined;
                    }
                    return { value: resolved };
                }
                if (typeof max === 'number' && value > max) {
                    const resolved = transformMaskedValue(max, mask, props);
                    if (resolved === undefined) {
                        return undefined;
                    }
                    return { value: resolved };
                }
            }
        }
        return { value: conformedValue.toString() };
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWluTWF4TnVtYmVyUGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01hc2tlZElucHV0L21pbk1heE51bWJlclBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFHL0MsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxFQUNoQyxLQUFLLEVBQ0wsTUFBTSxFQUNOLE1BQU0sRUFDTix3QkFBd0IsR0FDTixFQUFVLEVBQUU7SUFDOUIsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QixHQUFHLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FDakIsSUFBSSxNQUFNLENBQUMsSUFBSSxNQUFNLEdBQUcsTUFBTSxHQUFHLHdCQUF3QixHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ2xFLEVBQUUsQ0FDSCxDQUFDO1FBQ0YsR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckIsR0FBRyxHQUFHLFNBQVMsQ0FBQztTQUNqQjtLQUNGO1NBQU07UUFDTCxHQUFHLEdBQUcsS0FBSyxDQUFDO0tBQ2I7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsRUFLTCxFQUFFLEVBQUU7UUFMQyxFQUNwQyxHQUFHLEVBQ0gsR0FBRyxFQUNILElBQUksT0FFMkIsRUFENUIsS0FBSyxjQUo0QixzQkFLckMsQ0FEUztJQUM0QixPQUFBLENBQ3BDLGNBQStCLEVBQ2xCLEVBQUU7UUFDZixJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDdEQsTUFBTSxLQUFLLEdBQUcsaUJBQWlCLGlDQUFNLEtBQUssS0FBRSxLQUFLLEVBQUUsY0FBYyxJQUFHLENBQUM7WUFDckUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQzdCLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7b0JBQzFDLE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ3hELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTt3QkFDMUIsT0FBTyxTQUFTLENBQUM7cUJBQ2xCO29CQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUM7aUJBQzVCO2dCQUNELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7b0JBQzFDLE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQ3hELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTt3QkFDMUIsT0FBTyxTQUFTLENBQUM7cUJBQ2xCO29CQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUM7aUJBQzVCO2FBQ0Y7U0FDRjtRQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7SUFDOUMsQ0FBQyxDQUFBO0NBQUEsQ0FBQyJ9