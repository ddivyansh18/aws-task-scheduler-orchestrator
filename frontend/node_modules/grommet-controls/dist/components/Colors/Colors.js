var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { findDOMNode } from 'react-dom';
import { ThemeContext } from 'styled-components';
import { Box, Keyboard } from 'grommet';
import { normalizeColor } from 'grommet/utils/colors';
import { parseMetricToNum } from 'grommet/utils/mixins';
import { StyledColors, StyledColor, StyledColorContainer, StyledRow, StyledRows, } from './StyledColors';
const buildState = (props) => {
    const { colors, color, columns, wrap } = props;
    let colorRows = [];
    let lastRow = null;
    if (colors) {
        Object.keys(colors).forEach(item => {
            if (typeof colors[item] === 'object') {
                const row = { name: item, colors: [], buttonRef: React.createRef() };
                Object.keys(colors[item]).forEach(colorName => {
                    const colorsColor = colors[item][colorName];
                    row.colors.push({ name: colorName, color: colorsColor });
                });
                colorRows.push(row);
            }
            else {
                if (!lastRow) {
                    lastRow = { name: undefined, colors: [] };
                    colorRows.push(lastRow);
                }
                lastRow.colors.push({
                    name: item,
                    color: colors[item],
                    buttonRef: React.createRef(),
                });
            }
        });
    }
    const colorsPerRow = columns ||
        (colorRows.length === 1
            ? Math.sqrt(colorRows[0].colors.length)
            : colorRows.reduce((res, row) => Math.min(res, row.colors.length), Number.MAX_SAFE_INTEGER));
    let wrapColors = wrap;
    if (wrapColors === undefined) {
        wrapColors = columns === undefined && colorRows.length === 1;
    }
    if (wrapColors) {
        const finalRows = [];
        colorRows.forEach(row => {
            while (row.colors.length > 0) {
                finalRows.push({
                    name: row.name,
                    colors: row.colors.splice(0, colorsPerRow),
                });
            }
        });
        colorRows = finalRows;
    }
    else {
        colorRows = colorRows.map(row => (Object.assign(Object.assign({}, row), { colors: row.colors.filter((_, index) => index < colorsPerRow) })));
    }
    let activeRow = 0;
    let activeColor = 0;
    colorRows.find((row, rowIndex) => row.colors.find((item, colorIndex) => {
        const found = item.color === color;
        if (found) {
            activeRow = rowIndex;
            activeColor = colorIndex;
        }
        return found;
    }));
    return { colorRows, activeRow, activeColor };
};
/** A color selection element, with custom color palettes.<br/>
 *`import { Colors } from 'grommet-controls';`<br/>
 *`<Colors colors={...} />`<br/>
 */
class Colors extends Component {
    constructor(props) {
        super(props);
        this.setFocus = false;
        this.timer = 0;
        this.setActive = ({ rowIndex, colorIndex }) => {
            const { colorRows } = this.state;
            this.setFocus = true;
            const activeRow = Math.min(Math.max(0, rowIndex), colorRows.length - 1);
            const color = Math.max(0, colorIndex);
            const activeColor = Math.min(color, colorRows[activeRow].colors.length - 1);
            this.setState({
                activeRow,
                activeColor,
            });
        };
        this.onClickColor = ({ color, rowIndex, colorIndex, rowName, colorName, }) => () => {
            const { onSelect } = this.props;
            this.setActive({ rowIndex, colorIndex });
            if (onSelect) {
                onSelect({ color, rowName, colorName });
            }
        };
        this.state = buildState(props);
    }
    static getDerivedStateFromProps(nextProps) {
        return buildState(nextProps);
    }
    componentDidUpdate() {
        if (this.setFocus) {
            const { activeRow, activeColor, colorRows } = this.state;
            this.setFocus = false;
            if (colorRows[activeRow] &&
                colorRows[activeRow].colors[activeColor] &&
                colorRows[activeRow].colors[activeColor].buttonRef) {
                // eslint-disable-next-line react/no-find-dom-node
                const buttonNode = findDOMNode(colorRows[activeRow].colors[activeColor].buttonRef.current);
                if (buttonNode) {
                    buttonNode.scrollIntoView();
                    buttonNode.focus();
                }
            }
        }
    }
    componentWillUnmount() {
        clearTimeout(this.timer);
    }
    render() {
        const _a = this.props, { 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        wrap, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onSelect, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        columns, size } = _a, rest = __rest(_a, ["wrap", "onSelect", "columns", "size"]);
        const { colorRows, activeRow, activeColor } = this.state;
        const colors = (theme, cellSize) => colorRows.map((row, rowIndex) => (React.createElement(StyledRow, { key: `row_${rowIndex}`, theme: theme, style: {
                width: `${cellSize * row.colors.length}px`,
                height: `${cellSize}px`,
            } }, row.colors.map((color, colorIndex) => {
            const isActive = activeRow === rowIndex && activeColor === colorIndex;
            const colorStyle = {
                backgroundColor: color.color,
                color: normalizeColor('text', theme),
                left: `${cellSize * colorIndex}px`,
            };
            return (React.createElement(StyledColorContainer, { key: `color_${colorIndex}`, theme: theme },
                React.createElement(StyledColor
                // eslint-disable-next-line no-param-reassign
                , { 
                    // eslint-disable-next-line no-param-reassign
                    ref: color.buttonRef, style: colorStyle, size: size, theme: theme, tabIndex: isActive ? 0 : -1, a11yTitle: `${row.name !== undefined ? row.name : ''} ${color.name}`, plain: true, active: isActive, hoverIndicator: "background", onClick: this.onClickColor({
                        color: color.color,
                        rowIndex,
                        colorIndex,
                        colorName: color.name,
                        rowName: row.name,
                    }) },
                    React.createElement("span", null, color.color))));
        }))));
        return (React.createElement(ThemeContext.Consumer, null, theme => {
            const cellSize = parseMetricToNum(theme.calendar[size].daySize);
            return (React.createElement(StyledColors, Object.assign({ size: size, theme: theme }, rest),
                React.createElement(Keyboard, { onUp: event => {
                        event.preventDefault();
                        this.setActive({
                            rowIndex: activeRow - 1,
                            colorIndex: activeColor,
                        });
                    }, onDown: event => {
                        event.preventDefault();
                        this.setActive({
                            rowIndex: activeRow + 1,
                            colorIndex: activeColor,
                        });
                    }, onLeft: () => this.setActive({
                        rowIndex: activeRow,
                        colorIndex: activeColor - 1,
                    }), onRight: () => this.setActive({
                        rowIndex: activeRow,
                        colorIndex: activeColor + 1,
                    }) },
                    React.createElement(Box, null,
                        React.createElement(StyledRows, { style: { height: `${cellSize * colorRows.length}px` } }, colors(theme, cellSize))))));
        }));
    }
}
Colors.defaultProps = {
    size: 'medium',
};
export { Colors };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29sb3JzL0NvbG9ycy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUNMLFlBQVksRUFDWixXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLFNBQVMsRUFDVCxVQUFVLEdBQ1gsTUFBTSxnQkFBZ0IsQ0FBQztBQWF4QixNQUFNLFVBQVUsR0FBRyxDQUFDLEtBQW1CLEVBQWdCLEVBQUU7SUFDdkQsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztJQUMvQyxJQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDbkIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksTUFBTSxFQUFFO1FBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3BDLE1BQU0sR0FBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FB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