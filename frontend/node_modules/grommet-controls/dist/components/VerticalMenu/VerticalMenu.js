var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { Box, Button, Keyboard, Text } from 'grommet';
import { FormDown } from 'grommet-icons/icons/FormDown';
import { FormNext } from 'grommet-icons/icons/FormNext';
const isActive = (active, item) => item.id === active.id || item.label === active.label;
const hasActiveChidlren = (active, item) => {
    if (isActive(active, item)) {
        if (item.items && item.items.find(t => hasActiveChidlren(active, t))) {
            return true;
        }
    }
    return false;
};
const getExpandedItems = (children, active) => children.reduce((expandedItems, item) => {
    const { items, expanded, id, label } = item;
    if (expanded || (active && hasActiveChidlren(active, item))) {
        expandedItems.push(id || label);
    }
    let childrenExpandedItems = [];
    if (items) {
        childrenExpandedItems = getExpandedItems(items, active);
    }
    return expandedItems.concat(childrenExpandedItems);
}, []);
const getCollapsibleItems = (children) => children.reduce((collapsibleItems, { items, id, label }) => {
    let childrenCollapsibleItems = [];
    if (items) {
        collapsibleItems.push(id || label);
        childrenCollapsibleItems = getCollapsibleItems(items);
    }
    return collapsibleItems.concat(childrenCollapsibleItems);
}, []);
const getFlatChildrenIds = (children) => children.reduce((flatChildren, item) => {
    flatChildren.push(item.id || item.label);
    if (item.items) {
        // eslint-disable-next-line no-param-reassign
        flatChildren = flatChildren.concat(getFlatChildrenIds(item.items));
    }
    return flatChildren;
}, []);
const getChildrenById = (children, id) => {
    let items;
    children.some(item => {
        if (item.id === id || item.label === id) {
            ({ items } = item);
            return true;
        }
        if (item.items) {
            items = getChildrenById(item.items, id);
            if (items) {
                return true;
            }
        }
        return false;
    });
    return items;
};
const filterItems = (items, search) => {
    if (search && search.length) {
        const searchLC = search.toLowerCase();
        return items
            .map(item => Object.assign({}, item))
            .filter(item => {
            const { items: children, label } = item;
            if (typeof label === 'string' &&
                label.toLowerCase().indexOf(searchLC) >= 0) {
                return true;
            }
            if (children) {
                const childItems = filterItems(children, search);
                // eslint-disable-next-line no-param-reassign
                item.items = childItems;
                if (childItems.length) {
                    return true;
                }
            }
            return false;
        });
    }
    return items;
};
const compareItems = (items, nextItems) => {
    if (!items && !nextItems) {
        return true;
    }
    if ((!items && nextItems) || (items && !nextItems)) {
        return false;
    }
    if (items.length !== nextItems.length) {
        return false;
    }
    for (let i = 0; i < items.length; i += 1) {
        if (items[i].expanded !== nextItems[i].expanded ||
            items[i].href !== nextItems[i].href ||
            items[i].icon !== nextItems[i].icon ||
            items[i].label !== nextItems[i].label ||
            items[i].onClick !== nextItems[i].onClick ||
            items[i].widget !== nextItems[i].widget ||
            !compareItems(items[i].items, nextItems[i].items)) {
            return false;
        }
    }
    return true;
};
/** Hierarchical collapsible menu
 * ```$ npm install grommet-controls\n
 * import { VerticalMenu } from 'grommet-controls';\n
 * <VerticalMenu items={...} onSelect={...} />
 *```
 */
class VerticalMenu extends Component {
    constructor() {
        super(...arguments);
        this.state = { expandedItems: [] };
        this.onMenuChange = (id, expanded) => {
            const { expandedItems, filteredItems } = this.state;
            let newExpandedItems = [...expandedItems];
            if (expanded) {
                const toBeCollapsed = [
                    id,
                    ...getFlatChildrenIds(getChildrenById(filteredItems, id)),
                ];
                newExpandedItems = newExpandedItems.filter(item => toBeCollapsed.indexOf(item) < 0);
            }
            else {
                newExpandedItems.push(id);
            }
            this.setState({
                expandedItems: newExpandedItems,
            });
        };
        this.renderItem = (item, level = 1) => {
            const { activeItem, onSelect, buttonClass } = this.props;
            const { expandedItems } = this.state;
            const { items, id, label, widget, icon } = item, rest = __rest(item, ["items", "id", "label", "widget", "icon"]);
            const itemId = id || label;
            const isExpanded = expandedItems.includes(itemId);
            const ButtonClass = (items ? Button : buttonClass) || Button;
            const itemKey = `item_${itemId}_${level}`;
            let background;
            if (activeItem && activeItem.id === id) {
                background = {
                    color: 'active',
                    opacity: 'strong',
                };
            }
            const content = (React.createElement(Box, { background: background },
                React.createElement(ButtonClass, Object.assign({ onClick: !rest.route && !rest.path
                        ? () => items
                            ? this.onMenuChange(itemId, isExpanded)
                            : onSelect && onSelect(item)
                        : undefined, hoverIndicator: { color: 'active' } }, rest),
                    React.createElement(Box, { direction: "row", align: "center", pad: "small", style: {
                            marginLeft: items ? `${12 * level}px` : `${16 * level}px`,
                        } },
                        items && (isExpanded ? React.createElement(FormDown, null) : React.createElement(FormNext, null)),
                        React.createElement(Box, { direction: "row", justify: "between", fill: "horizontal", align: "center" },
                            React.createElement(Box, { direction: "row", align: "center", gap: "small" },
                                icon,
                                typeof label === 'string' ? (React.createElement(Text, null, items ? React.createElement("strong", null, label) : label)) : (label)),
                            widget)))));
            return (React.createElement(Box, { key: itemKey },
                items ? (React.createElement(Keyboard, { onDown: () => this.onMenuChange(itemId, false), onRight: () => this.onMenuChange(itemId, false), onUp: () => this.onMenuChange(itemId, true), onLeft: () => this.onMenuChange(itemId, true) }, content)) : (content),
                items &&
                    isExpanded &&
                    items.map(child => this.renderItem(child, level + 1))));
        };
    }
    static getDerivedStateFromProps(nextProps, prevState = {}) {
        const { items, expandAll, activeItem, search } = nextProps;
        const { originalExpandAll, search: stateSearch, items: stateItems = [], } = prevState;
        if (items !== stateItems || // when instance are not the same we do not need to do a full compare.
            !compareItems(items, stateItems) ||
            expandAll !== originalExpandAll ||
            search !== stateSearch) {
            const filteredItems = filterItems(items, search);
            const collapsibleItems = getCollapsibleItems(filteredItems);
            let expandedItems;
            if (expandAll || (search && search.length)) {
                expandedItems = collapsibleItems;
            }
            else {
                expandedItems = getExpandedItems(filteredItems, activeItem);
            }
            const allExpanded = typeof expandAll !== 'undefined'
                ? expandAll
                : collapsibleItems.length === expandedItems.length;
            return {
                expandedItems,
                items,
                filteredItems,
                search,
                collapsibleItems,
                allExpanded,
                expandAll,
                originalExpandAll: expandAll,
            };
        }
        return null;
    }
    render() {
        const { filteredItems } = this.state;
        return (React.createElement(React.Fragment, null, filteredItems && filteredItems.map(item => this.renderItem(item, 1))));
    }
}
export { VerticalMenu };
//# sourceMappingURL=data:application/json;base64,