var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component } from 'react';
import { Add } from 'grommet-icons/icons/Add';
import { Subtract } from 'grommet-icons/icons/Subtract';
import { MaskedInput } from '../MaskedInput';
const precision = n => {
    // eslint-disable-next-line no-restricted-globals
    if (!isFinite(n))
        return 0;
    let e = 1;
    let p = 0;
    while (Math.round(n * e) / e !== n) {
        e *= 10;
        p += 1;
    }
    return p;
};
const minMax = ({ value, min, max }) => {
    let val = value;
    if (min !== undefined) {
        val = Math.max(val, min);
    }
    if (max !== undefined) {
        val = Math.min(val, max);
    }
    return val;
};
/** A masked number input, with widgets to increment/decrement the value<br/>
 *  Additionally, all properties of MaskedInput apply<br/>
 *  `import { NumberInput } from 'grommet-controls';`<br/>
 *  `<NumberInput value={...} />`<br/>
 */
class NumberInput extends Component {
    constructor() {
        super(...arguments);
        this.upDateValue = null;
        this.value = undefined;
        this.valueToNumber = (value) => {
            const { prefix, suffix, thousandsSeparatorSymbol, decimalSymbol, } = this.props;
            return MaskedInput.maskedNumberValue({
                value,
                prefix,
                suffix,
                thousandsSeparatorSymbol,
                decimalSymbol,
            });
        };
        this.isFloat = (val) => {
            const floatRegex = /^-?\d+(?:[.,]\d*?)?$/;
            if (!floatRegex.test(val.toString())) {
                return false;
            }
            // eslint-disable-next-line no-restricted-globals
            if (isNaN(parseFloat(val.toString()))) {
                return false;
            }
            return true;
        };
        this.addStep = () => {
            const { max, min, step, value } = this.props;
            let val = this.isFloat(value)
                ? (this.valueToNumber(value) + step).toFixed(precision(step))
                : min || 0;
            if (typeof val === 'number' && Number.isNaN(val)) {
                if (min !== undefined) {
                    val = min;
                }
                else {
                    val = undefined;
                }
            }
            else {
                val = minMax({ value: val, min, max });
            }
            this.upDateValue(val.toString());
        };
        this.subtractStep = () => {
            const { max, min, step, value } = this.props;
            let val = this.isFloat(value)
                ? (this.valueToNumber(value) - step).toFixed(precision(step))
                : max || 0;
            if (typeof val === 'number' && Number.isNaN(val)) {
                if (max !== undefined) {
                    val = max;
                }
                else {
                    val = undefined;
                }
            }
            else {
                val = minMax({ value: val, min, max });
            }
            this.upDateValue(val.toString());
        };
        this.onChange = e => {
            const { onChange, emptyValue } = this.props;
            if (onChange) {
                let { value } = e.target;
                if (this.value !== value) {
                    if (value === undefined) {
                        value = emptyValue;
                    }
                    this.value = value;
                    onChange(Object.assign(Object.assign({}, e), { target: Object.assign(Object.assign({}, e.target), { value }) }));
                }
            }
        };
    }
    render() {
        const _a = this.props, { 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onChange, min, max, step, pipe: userPipe, prefix, suffix, thousandsSeparatorSymbol, decimalSymbol, decimals, integers, a11yIncrement, a11yDecrement, mask: userMask, addIcon, subtractIcon, disabled } = _a, rest = __rest(_a, ["onChange", "min", "max", "step", "pipe", "prefix", "suffix", "thousandsSeparatorSymbol", "decimalSymbol", "decimals", "integers", "a11yIncrement", "a11yDecrement", "mask", "addIcon", "subtractIcon", "disabled"]);
        const allowNegative = typeof min !== 'number' || min < 0;
        const includeThousandsSeparator = !!thousandsSeparatorSymbol;
        const allowDecimal = decimals === null || (typeof decimals === 'number' && decimals > 0);
        const mask = userMask ||
            MaskedInput.createNumberMask({
                prefix,
                suffix,
                includeThousandsSeparator,
                thousandsSeparatorSymbol,
                allowDecimal,
                decimalSymbol,
                decimalLimit: decimals,
                integerLimit: integers,
                allowNegative,
            });
        const pipe = userPipe ||
            MaskedInput.createMinMaxInputPipe(Object.assign({ mask,
                prefix,
                suffix,
                thousandsSeparatorSymbol,
                decimalSymbol,
                min,
                max }, rest));
        return (React.createElement(MaskedInput, Object.assign({ update: update => {
                this.upDateValue = update;
            }, pattern: "[0-9]*", inputMode: "numeric", onKeyDown: this.subtractStep, onKeyUp: this.addStep, disabled: disabled, onChange: this.onChange, pipe: pipe, mask: mask, widgets: [
                {
                    icon: addIcon,
                    onClick: disabled ? undefined : this.addStep,
                    'aria-label': `${a11yIncrement} ${step}`,
                },
                {
                    icon: subtractIcon,
                    onClick: disabled ? undefined : this.subtractStep,
                    'aria-label': `${a11yDecrement} ${step}`,
                },
            ] }, rest)));
    }
}
NumberInput.defaultProps = {
    emptyValue: '',
    step: 1,
    addIcon: React.createElement(Add, null),
    subtractIcon: React.createElement(Subtract, null),
    prefix: '',
    suffix: '',
    thousandsSeparatorSymbol: '',
    decimalSymbol: '.',
    decimals: null,
    integers: null,
    a11yIncrement: 'Increment by',
    a11yDecrement: 'Decrement by',
};
export { NumberInput };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnVtYmVySW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9OdW1iZXJJbnB1dC9OdW1iZXJJbnB1dC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc3QyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRTtJQUNwQixpREFBaUQ7SUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDUjtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxNQUFNLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtJQUNyQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7SUFDaEIsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1FBQ3JCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUMxQjtJQUNELElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUNyQixH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